// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const addDoggo = `-- name: AddDoggo :execresult
INSERT INTO dogs (name, breed)
VALUES($1, $2)
`

type AddDoggoParams struct {
	Name  string
	Breed string
}

func (q *Queries) AddDoggo(ctx context.Context, arg AddDoggoParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, addDoggo, arg.Name, arg.Breed)
}

const deleteDoggoInfo = `-- name: DeleteDoggoInfo :execresult
DELETE FROM dogs
WHERE id = $1
`

func (q *Queries) DeleteDoggoInfo(ctx context.Context, id int64) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteDoggoInfo, id)
}

const getDoggo = `-- name: GetDoggo :one
SELECT id, name, breed
FROM dogs
WHERE id = $1
`

func (q *Queries) GetDoggo(ctx context.Context, id int64) (Dog, error) {
	row := q.db.QueryRow(ctx, getDoggo, id)
	var i Dog
	err := row.Scan(&i.ID, &i.Name, &i.Breed)
	return i, err
}

const listDoggos = `-- name: ListDoggos :many

SELECT id, name, breed
FROM dogs
`

func (q *Queries) ListDoggos(ctx context.Context) ([]Dog, error) {
	rows, err := q.db.Query(ctx, listDoggos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dog
	for rows.Next() {
		var i Dog
		if err := rows.Scan(&i.ID, &i.Name, &i.Breed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDoggoInfo = `-- name: UpdateDoggoInfo :execresult
UPDATE dogs
SET name = $1, breed = $2
WHERE id = $3
`

type UpdateDoggoInfoParams struct {
	Name  string
	Breed string
	ID    int64
}

func (q *Queries) UpdateDoggoInfo(ctx context.Context, arg UpdateDoggoInfoParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateDoggoInfo, arg.Name, arg.Breed, arg.ID)
}
